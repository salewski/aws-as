-*- org -*-

#+STARTUP: hidestars oddeven

HINT: org-mode global cycling: S-TAB

HINT: To show all content (including any drawers), regardless of org-mode
startup visibility:

:    C-u C-u C-u TAB

[The above assumes the default key binding of TAB to [[elisp:org-cycle][org-cycle]].]


This is the 'NEWS' file for the 'aws-as' project. This file contains
information on changes since the last release of the package, as well as a
running list of high-level changes from previous versions.  If critical bugs
are found in any of the software, notice of such bugs and the versions in
which they were fixed will be noted here, as well.

-----------------------------------------------------------------------

* aws-as 0.2.1 (TBD)

** fixes

   (None)


** improvements

   (None)


* aws-as 0.2.0 (2020-09-14)

** fixes

   (None)


** improvements

*** simpler configure time and runtime deps

**** python3 no longer required


**** aws-cli no longer required


*** 'aws-as -' now means "switch to the other profile"

    https://github.com/salewski/aws-as/issues/5

    This allows even faster switching back and forth between two profiles. The
    behavior is intended to be analogous to the 'cd -' command in your shell
    to hop back and forth between two directories.

    Upon activation, there will not yet be an "old profile" to hop back to, so
    using this syntax in that scenario will yield the message (on stderr):

        aws-as: old profile not set

    The same is actually true until you switch to a second profile within a
    session, for obvious reasons.


*** aws-vault integration

**** Background on aws-vault integration

     The 'aws-as' program now uses the 'aws-vault' program for some tasks that
     were previously done directly, or more slowly through aws-cli.

     This adds a new configure time dependency on the 'aws-vault' program from
     99designs:

        https://github.com/99designs/aws-vault

        https://github.com/99designs/aws-vault/blob/master/USAGE.md

        https://99designs.com/blog/engineering/aws-vault/

     This new dependency will require:

        1. one-time setup of the aws-vault tool and it's dependencies

           This mainly involves choosing a storage backend and configuring it.

        2. one-time config of one or more aws-cli profiles

           This involves storing the credentials in aws-vault for one or more
           of your aws-cli profiles with what AWS calls "long-term credentials"
           (those that may currently be stored in your ~/.aws/credentials file).

           This step will allow aws-vault to obtain temporary credentials
           (sts:GetSessionToken) for the "source_profile" entries (with MFA, if
           so configured), which can then be used to obtain other temporary
           credentials when assuming roles (sts:AssumeRole) for the other
           dependent profiles.

     It should be noted that 'aws-vault' takes an approach to the 'aws-cli'
     configuration that is similar to the approach used by `aws-as': both tools
     leverage the 'aws-cli' config file(s). The notion of what a "profile" is
     comes from the 'aws-cli' config.

     The 'aws-vault' tool honors the 'mfa_serial' serial setting on all
     'aws-cli' profiles, and like 'aws-as-0.1.1' (but /unlike/ raw 'aws-cli')
     will require MFA authentication when obtaining short-term session
     credentials (sts:GetSessionToken) for a non-Role profile when the
     'mfa_serial' key is present. This means any 'aws_as_mfa_serial' config
     keys on such profiles should be renamed to just 'mfa_serial'.

     Finally, the dependency on 'aws-vault' allows us to remove some of our
     other dependencies (jq(1), python3(1), others), at least for now.


**** aws-as's home-grown, file-based caching has been replaced by aws-vault

     issue #25: "aws-as: replace home-grown, file-based caching with aws-vault"
     https://github.com/salewski/aws-as/issues/25

     The ~/.aws-as.d/cache/ subdirectory is no longer used or needed. You
     should delete it if you have one.


**** listing the aws-cli profiles (aws-as -L) now uses aws-vault internally

     issue #23: "aws-as: 'L' (--list-profiles) would be much faster if implemented via 'aws-vault' (rather than aws-cli)"
     https://github.com/salewski/aws-as/issues/23

     Speed is a feature.


**** aws-as: add option '--none' and value '_' to mean "no profile"

     https://github.com/salewski/aws-as/issues/29

     An aws-as '--none' option has been added to mean "unset the in-effect
     aws-cli profile".

     An alternative way to request the same thing is to specify '_' (a single
     underscore character) as the name of the AWS_CLI_PROFILE command line
     argument. Therefore, all of the following are equivalent:

         (some-prof-name) $ aws-as --none
         (_) $

         (some-prof-name) $ aws-as _
         (_) $

         (some-prof-name) $ aws-as -- _
         (_) $

     It is expected that experienced users will tend to use the second form
     (aws-as _), and newer users will discover it via their use of '--none'
     (which shows up in the program's '--help' output).

     Note that the augmented $PS1 prompt has been changed to show '_' rather
     than '-' to indicate "no aws-cli profile is currently in-effect". This
     aligns the displayed notation with what the user actually types. This
     will become more important once issue #5 is implemented, in which '-'
     will be made to mean "switch to the other one".


**** aws-as: '-c' (--clear-env) now used to clear the AWS_* cred. vars. from the environment

     https://github.com/salewski/aws-as/issues/30

     With the introduction of 'aws-vault' integration the 'aws-as' program's
     notion of the in-effect aws-cli profile has been decoupled from the
     presence of any AWS_* credential variables in the current environment.

     In aws-as-0.1.0, the following command would unset the vars from the
     environment and also (implicitly) unset the in-effect profile (as
     reflected in the augmented $PS1 prompt):

         (some-prof-name) $ aws-as -C
         (-) $

     In aws-as-0.2.0 and going forward, clearing the AWS_* credential
     variables from the current shell environment is done using the '-c'
     (--clear-env) option:

         (some-prof-name) $ aws-as -c
         (some-prof-name) $

     or, equivalently:

         (some-prof-name) $ aws-as --clear-env
         (some-prof-name) $

     Note that clearing the AWS_* no longer unsets the in-effect profile (as
     reflected in the unchanging value of the augmented $PS1 variable in the
     above example).

     See also the related changes of '--hoist' and '--clear-creds' elsewhere
     in this announcement.


**** aws-as: '-C' (--clear-creds) clears cached creds from aws-vault

     The '-C' (--clear-creds) option can be thought of as a stronger form of
     '-c'. It implies the new '-c' (--clear-env) opt, but also requests that
     'aws-vault' clear the temporary credentials from its cache for the
     in-effect aws-cli profile.

     Also implies '--none', which unsets the in-effect profile (because using
     the profile again may require re-authentication -- it no longer has an
     active "session" with cached creds in the aws-vault cache).


**** aws-as: '-H' (--hoist) "hoists up" AWS_* cred. vars. from aws-vault invoked subprocess

     https://github.com/salewski/aws-as/issues/26

     The "new normal" default behavior of 'aws-as' is to maintain a notion of
     the in-effect aws-cli profile without having any 'AWS_*' credential
     variables (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and
     AWS_SESSION_TOKEN) in the current shell process.

     However, for ad hoc scripting and other purposes, it is sometimes
     convenient to be able to operate in the context of the current shell in
     order to have access to state in the current shell that is not exported
     -- so would not be available to a subprocess.

     The new '-H' (--hoist) option is used to populate the AWS_* credential
     variables in the current environment, as obtained from a subprocess
     invoked by 'aws-vault'. The 'aws-vault' command injects the correct
     values based on the currently in-effect profile, and the subprocess uses
     them in a generated script emitted on stdout to be consumed by the
     'aws-as' grandparent process. The process tree looks like this:

     :    aws-as
     :    └── aws-vault
     :        └── bash -c '# script that captures values of AWS_* vars'


**** aws-as: '-E' (--export) and '-U' (--unexport) now imply '-H' (--hoist)

     https://github.com/salewski/aws-as/issues/26

     Since the 'AWS_*' credential variables are no longer present by default
     in the current shell, the '-E' and '-U' options causes them to first be
     obtained from a grandchild process (invoked by an 'aws-vault' suprocess
     of the current shell) prior to applying the respective export or unexport
     operation on them.


**** aagg: command to invoke 'aws-vault exec' with the in-effect aws-cli profile

     https://github.com/salewski/aws-as/issues/4

     Once you have used 'aws-as' to establish an in-effect aws-cli profile in
     the context of your current shell, the next thing you'll want to do is
     run one or more commands that somehow use the AWS API.

     The 'aagg' command is the primary way to do that. It is a very simple
     wrapper around the 'aws-vault exec' command that sets up the invocation
     using the in-effect profile. As a user, you just prefix the command you
     really want to run with 'aagg':

         aagg YOUR_COMMAND [ARG...]

     The 'aagg' command will build the approprate 'aws-vault' command line to
     use the aws-cli credentials for the in-effect profile. So the above would
     cause an invocation like this:

         /path/to/aws-vault [OPT...] exec IN_EFFECT_PROFILE_NAME -- YOUR_COMMAND [ARG...]

     Here's an example session:

         $ eval "$(aws-as-activate -s)"

         (_) $ aws-as some-prof-name
         [MFA auth, etc, if necessary]

         (some-prof-name) $ aagg aws sts get-caller-identity
         {
              "UserId": "AIDASOMERANDOMESTRING",
              "Account": "111111111111",
              "Arn": "arn:aws:iam::111111111111:user/someuser"
         }

     You can have 'aagg' show you the command it invokes by providing the '-v'
     option:

         (some-prof-name) $ aagg -v aws sts get-caller-identity
         + /path/to/aws-vault exec some-prof-name -- aws sts get-caller-identity
         {
              "UserId": "AIDASOMERANDOMESTRING",
              "Account": "111111111111",
              "Arn": "arn:aws:iam::111111111111:user/someuser"
         }
         + t_estat=0
         + false
         + [[ himxBHs =~ .*x.* ]]
         + set +x

    As you would expect, the 'aagg' function and all of it's supporting
    machinery get deleted from the current shell process when you invoke
    'aws-as-deactivate'.


*** aws-as now has a configuration file: ~/.aws-as.d/init.sh

    https://github.com/salewski/aws-as/issues/1
    https://github.com/salewski/aws-as/issues/31

    If the file does not exist, it is created the first time the aws-as
    program is initialized. The auto-created version is heavily commented, and
    contains documentation for the full universe of supported config file
    variables.

    A user can request that a config file be generated to stdout thus:

        (_) $ aws-as --generate-config

        # review what the latest default config file looks like
        (_) $ aws-as --generate-config | less -N

        # compare it to your current config (bash syntax)
        (_) $ colordiff -u ~/.aws-as.d/init.sh <(aws-as --generate-config)

        # replace your current config with a fresh default
        (_) $ aws-as --generate-config > ~/.aws-as.d/init.sh

        # Or, equivalently, just delete the existing file, and aws-as will
        # write a new copy the next time it is activated:
        $ rm ~/.aws-as.d/init.sh
        $ eval "$(aws-as-activate -s)"
        (_) $ less ~/.aws-as.d/init.sh

    The file is a Bourne-style shell script snippet, and is "sourced" by the
    aws-as(1) program at initialization time. For valid aws-as config file
    variables that may appear in it, see aws-as(1) or the project's online
    documentation:

        https://salewski.github.io/aws-as/
        https://github.com/salewski/aws-as


**** valid config file settings

     + aws_as_cfg_debug_init (true|false)

       If enabled, will emit debugging messages related to the loading to the
       config file variables.

     + aws_as_cfg_auto_hoist (true|false)

       If enabled, will cause aws-as to automatically "hoist" the AWS_*
       credential variables into the current environment when switching to any
       aws-cli profile.

       The hoisted variables are not, by default, exported.

       See also: aws_as_cfg_auto_export

     + aws_as_cfg_auto_export (true|false)

       When AWS_* credential variables (AWS_ACCESS_KEY_ID,
       AWS_SECRET_ACCESS_KEY, and AWS_SESSION_TOKEN) are hoisted into the
       current shell, by default they are set but not exported. User can have
       them exported by manually invoking 'aws-as -E' (or equivalently,
       'aws-as --export'), but if you need to do that repeatedly the manual
       invocation will get tedious fast.

       If this setting is set to 'true', then the AWS_* cred. vars will be
       automatically exported upon being hoisted into the current shell
       environment.

       See also: aws_as_cfg_auto_hoist


* aws-as 0.1.0 (2020-09-12)

  This is the initial release of the 'aws-as' project.

  The 'aws-as' project provides a collection of tools for switching between
  cached sets of temporary AWS STS credentials for IAM Users and/or Roles when
  working at the command line.

  The 'aws-as' command works with your existing 'aws-cli' configuration and
  works alongside it to augment its capabilities. The 'aws-as' programs treat
  the aws-cli configuration as a read-only resource, and never attempts to
  modify it in any way.

  The 'aws-as' command supports the easy use of MFA for both Role and non-Role
  aws-cli profiles. Temporary credentials are cached and reused until they
  expire. Expired credentials are detected prior to use and new temporary
  credentials are obtained as needed. Re-authentication (with MFA, if
  necessary) is performed when needed.

  There is a non-standard 'aws_as_mfa_serial' key that is supported to cause
  sts:GetSessionToken temporary credentials to be obtained using MFA
  authentication. The aws-cli tool supports the MFA capability, but does not
  recognize any configuration that would cause it to prompt for an MFA token;
  the user must specify both the MFA device serial number and the token code
  on the command line. Adding the 'aws_as_mfa_serial' to a non-Role profile
  allows 'aws-as' to take care of those details for you (it invokes the more
  cumbersome 'aws' command behind the scenes).

  Once installed, you use it like this (the changed prompt is documented
  below):

      $ eval "$(aws-as-activate -s)"
      (-) $

  That makes two commands (both implemented as bash functions) available in
  your shell environment:

      aws-as-deactivate
      aws-as

  The 'aws-as-deactivate' causes all of the function code and variables
  "installed" by the above 'eval' to be deleted from the shell environment; it
  basically puts things back to the way they were prior to the 'eval'. The
  'AWS_*' variables (if any) that had been set in the environment previously
  are restored to the state they were found in.

  The 'aws-as' command is the main tool used to switch between the credentials
  associated with different aws-cli profiles. Basic use looks like this:

  List the aws-cli profiles:

      $ aws-as -L
      some-prof-name
      some-other-prof-name
      yet-another-prof-name

  Switch to a given profile:

      $ aws-as some-prof-name
      (some-prof-name) $

  Note that the $PS1 setting has been augmented with the name of the profile
  whose creds are currently in effect. The earlier prompt prefix "(-)"
  indicated that aws-as was active in the environment, but no profile had been
  selected to be active. If you change to a different profile, that other
  profile will be indicated:

      $ aws-as some-other-prof-name
      (some-other-prof-name) $

  To go back to /not/ having any profile be active, use the '-C' (--clear-creds)
  option:

      (some-other-prof-name) $ aws-as -C
      (-) $

  To have aws-as remove itself entirely from your shell environment, invoke
  the 'aws-as-deactivate' command:

      (-) $ aws-as-deactivate
      $

  Note that the 'aws-as' command is intended to "feel like" a normal command
  line program. Among other things, it provides a meaningful return code (zero
  for success, non-zero for error) as an "exit status", and you can ask for
  its version:

      $ aws-as --version
      aws-as 0.1.0  (built: 2020-09-12 04:21:48)

      Copyright (C) 2020 Alan D. Salewski <salewski@att.net>
      License GPLv2+: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html>.
      This is free software: you are free to change and redistribute it.
      There is NO WARRANTY, to the extent permitted by law.

      Written by Alan D. Salewski.

  and it's help output:

      $ aws-as --help
      usage: aws-as [-v...] { -h | --help }
        or:  aws-as [-v...] { -V | --version }
        or:  aws-as [-v...] { -C | --clear-creds }
        or:  aws-as [-v...] { -E | --export }
        or:  aws-as [-v...] { -L | --list-profiles }
        or:  aws-as [-v...] { -U | --unexport }
        or:  aws-as [OPTION...] [--] AWS_CLI_PROFILE

      Switch to using creds from the specified aws-cli profile,
      authenticating with MFA, if necessary.

      CAREFUL: Bundling of short-form options is not (yet?) supported.

        -h, --help           Print this help message on stdout
        -V, --version        Print the version of the program on stdout

        -C, --clear-creds    Unset AWS_* credential variables in the environment

        -E, --export         Mark the AWS_* credential variables for export
        -U, --unexport       Un-mark the AWS_* creds vars for export (turn off 'x' attribute)

        -L, --list-profiles  Print list of aws-cli profiles on stdout

        -v, --verbose        Print program progress messages on stderr. Specify multiple
                               times to increase verbosity: info, debug, and tracing (set -x)

            --               Signals the end of options and disables further options processing.
                               Any remaining argument will be interpreted as teh AWS_CLI_PROFILE.

      Report bugs to Alan D. Salewski <salewski@att.net>.

  Note that the notion of "in-effect aws-cli profile" is handled
  indirectly. The profile name is used to obtain temporary AWS credentials,
  but the profile name is not reflected in the environment. That is, 'aws-as'
  does not set the 'AWS_PROFILE' environment variable that some programs are
  aware of. Instead, it sets the trio of variables 'AWS_ACCESS_KEY_ID',
  'AWS_SECRET_ACCESS_KEY', and 'AWS_SESSION_TOKEN'. Aside from using the
  profile name to augment the $PS1 value, it does not actually maintain the
  internal notion of the "current" profile; the current profile is simply the
  one that corresponds to the credentials in the AWS_* variables.

  By default, the 'AWS_*' variables are set in the current shell environment,
  but they are not exported. To export them, use the '-E' (--export) option:

      (some-prof-name) $ aws-as -E

  to remove the export attribute from the 'AWS_*' variables, use the '-U' (--unexport)
  option:

      (some-prof-name) $ aws-as -U

  To have the commands report what they are doing, use the '-v' (--verbose)
  option. You can specify '-v' more than once; each additional '-v' (up to
  three) increases the output verbosity. Three '-v' options cause tracing
  (set -x) to be enable within the context of the 'aws-as' operation.
